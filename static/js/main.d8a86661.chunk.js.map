{"version":3,"sources":["CheckBox.js","App.js","reportWebVitals.js","index.js"],"names":["CheckBox","props","id","value","getIndexOfCheckedBoxes","checked","left","className","type","name","onChange","e","htmlFor","rightList","idxToBeRemovedLeft","eventToBeRemoved","leftList","App","useState","leftListState","setLeftListState","rightListState","setRightListState","leftDisable","setLeftDisable","rightDisable","setRightDisable","target","parentElement","console","log","slice","includes","parseInt","idx","newList","i","length","idxToBeRemoved","push","removeUnCheckedNodeIdx","currentEvent","substring","removeUncheckedNodeEvent","renderLeftList","map","renderRightList","Fragment","onClick","forEach","event","disabled","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d8a86661.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\nfunction CheckBox(props) {\r\n  // console.log(props);\r\n  let { id, value, getIndexOfCheckedBoxes, checked, left } = props;\r\n  // getIndexOfCheckedBoxes(id);\r\n  id = \"cbox\" + id;\r\n  return (\r\n    <div id={id} className=\"cbox\">\r\n      <input\r\n        left={left}\r\n        type=\"checkbox\"\r\n        checked={checked}\r\n        name={id}\r\n        id={id}\r\n        value={value}\r\n        onChange={(e) => getIndexOfCheckedBoxes(e, left)}\r\n      />\r\n      <label htmlFor={id}>{value}</label>\r\n      <br />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CheckBox;\r\n","import \"./App.css\";\nimport CheckBox from \"./CheckBox\";\nimport \"./style.css\";\nimport React, { useState } from \"react\";\n\nlet rightList = [100, 200, 300, 400, 500];\nlet idxToBeRemovedLeft = [];\nlet idxToBeRemovedRight = [];\nlet eventToBeRemoved = [];\nlet leftList = [1, 2, 3, 4, 5];\nfunction App() {\n  const [leftListState, setLeftListState] = useState(leftList);\n  const [rightListState, setRightListState] = useState(rightList);\n  const [leftDisable, setLeftDisable] = useState(true);\n  const [rightDisable, setRightDisable] = useState(true);\n\n  function removeUnCheckedNodeIdx(idx, idxToBeRemovedLeft) {\n    let newList = [];\n    for (let i = 0; i < idxToBeRemovedLeft.length; i++) {\n      let idxToBeRemoved = idxToBeRemovedLeft[i];\n      if (parseInt(idxToBeRemoved) === parseInt(idx)) {\n        continue;\n      } else {\n        newList.push(idxToBeRemoved);\n      }\n    }\n    return newList;\n  }\n\n  function removeUncheckedNodeEvent(id, eventToBeRemoved) {\n    let newList = [];\n    for (let i = 0; i < eventToBeRemoved.length; i++) {\n      let currentEvent = eventToBeRemoved[i];\n      if (parseInt(currentEvent.target.id.substring(4)) === parseInt(id)) {\n        continue;\n      } else {\n        newList.push(currentEvent);\n      }\n    }\n    return newList;\n  }\n  const getIndexOfCheckedBoxes = (e, left) => {\n    // let isLeft = true;\n    const isLeft =\n      e.target.parentElement.parentElement.id === \"checkboxes-left\"\n        ? true\n        : false;\n    if (isLeft) {\n      console.log(\n        \"Event for leftDisable\",\n        e.target.parentElement.parentElement.id,\n      );\n      if (e.target.checked) {\n        setLeftDisable(false);\n      }\n    } else {\n      if (e.target.checked) {\n        setRightDisable(false);\n      }\n    }\n    const id = e.target.id.slice(4);\n    if (idxToBeRemovedLeft.includes(parseInt(id))) {\n      if (e.target.checked) return;\n      if (e.target.checked === false) {\n        idxToBeRemovedLeft = removeUnCheckedNodeIdx(id, idxToBeRemovedLeft);\n        eventToBeRemoved = removeUncheckedNodeEvent(id, eventToBeRemoved);\n        if (eventToBeRemoved.length === 0) {\n          setLeftDisable(true);\n          setRightDisable(true);\n        }\n\n        return;\n      }\n    }\n    idxToBeRemovedLeft.push(parseInt(id));\n    eventToBeRemoved.push(e);\n  };\n\n  function removeAllIndicesRight() {\n    console.log(\"In remove all indices right\");\n    let newList = [];\n    for (let i = 0; i < rightList.length; i++) {\n      if (idxToBeRemovedLeft.includes(i)) {\n        continue;\n      } else {\n        newList.push(rightList[i]);\n      }\n    }\n    eventToBeRemoved.forEach((event) => {\n      leftList.push(event.target.value);\n    });\n\n    for (let i = 0; i < eventToBeRemoved.length; i++) {\n      let event = eventToBeRemoved[i];\n      event.target.checked = false;\n    }\n    console.log(\"Newlist: \", newList);\n    setRightListState([...newList]);\n    setLeftListState([...leftList]);\n    rightList = newList;\n    idxToBeRemovedLeft = [];\n    eventToBeRemoved = [];\n    setRightDisable(true);\n    setLeftDisable(true);\n  }\n\n  // TODO: Add similiar isLeft condition here so that we would be able to solve it here Only just reverse everything done here\n  function removeAllIndices() {\n    let newList = [];\n    for (let i = 0; i < leftList.length; i++) {\n      if (idxToBeRemovedLeft.includes(i)) {\n        continue;\n      } else {\n        newList.push(leftList[i]);\n      }\n    }\n    eventToBeRemoved.forEach((event) => {\n      rightList.push(event.target.value);\n    });\n\n    for (let i = 0; i < eventToBeRemoved.length; i++) {\n      let event = eventToBeRemoved[i];\n      event.target.checked = false;\n    }\n    setLeftListState([...newList]);\n    setRightListState([...rightList]);\n    leftList = newList;\n    idxToBeRemovedLeft = [];\n    eventToBeRemoved = [];\n    setRightDisable(true);\n    setLeftDisable(true);\n  }\n\n  function checkAllLeft(leftList) {\n    const renderLeftList = leftListState.map((value, idx) => (\n      <CheckBox\n        left={\"true\"}\n        idx={idx}\n        id={idx}\n        value={value}\n        key={idx}\n        checked=\"true\"\n        getIndexOfCheckedBoxes={getIndexOfCheckedBoxes}\n      />\n    ));\n    // setLeftListState(rende)\n  }\n\n  const renderLeftList = leftListState.map((value, idx) => (\n    <CheckBox\n      left={\"true\"}\n      idx={idx}\n      id={idx}\n      value={value}\n      key={idx}\n      getIndexOfCheckedBoxes={getIndexOfCheckedBoxes}\n    />\n  ));\n\n  const renderRightList = rightListState.map((value, idx) => (\n    <CheckBox\n      id={idx}\n      value={value}\n      key={idx}\n      getIndexOfCheckedBoxes={getIndexOfCheckedBoxes}\n    />\n  ));\n  return (\n    <React.Fragment>\n      <div className=\"container\">\n        <div className=\"box1\">\n          {/* <button className=\"check-all\" id=\"check-all-left\">\n            Check All\n          </button> */}\n          <div id=\"checkboxes-left\">{renderLeftList}</div>\n        </div>\n        <div className=\"box2\">\n          {/* <button className=\"check-all\" id=\"check-all-right\">\n            Check All\n          </button> */}\n          <div id=\"checkboxes-right\">{renderRightList}</div>\n        </div>\n      </div>\n      <div className=\"btn-grp\">\n        <button\n          className=\"btn\"\n          id=\"btn-right\"\n          onClick={removeAllIndicesRight}\n          disabled={rightDisable}\n        >\n          &lt;\n        </button>\n        <button\n          id=\"btn-left\"\n          className=\"btn\"\n          onClick={removeAllIndices}\n          disabled={leftDisable}\n        >\n          &gt;\n        </button>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}